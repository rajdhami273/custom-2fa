const { getFiles } = require('./fn');

module.exports = ({ type, options }, globalVariable) => {
    return new Promise((resolve, reject) => {

        switch (type) {
            case 'mongoose':
                if(!globalVariable.packages.mongoose) {
                    return reject("`mongoose` not installed or included in package.json dependencies. Please run `npm install --save mongoose` ");
                }
                try {
                    const mongoose = globalVariable.packages.mongoose;


                    const { url, plugins, ...opts } = options;
                    if (url) {
                        if (plugins) {
                            for (let i = 0; i < plugins.length; i++) {
                                mongoose.plugin(...Array.isArray(plugins[i]) ? plugins[i] : [plugins[i]])
                            }
                        }
                        const modelPaths = getFiles(globalVariable.rootDir, 'models', 'model.js');
                        const models = modelPaths.reduce((t, c) => {
                            const mp = require(globalVariable.rootDir + '/' + c.path);
                            const p = typeof mp == 'function' ? mp(mongoose) : mp;
                            const s = new mongoose.Schema(p.schema, p.options);
                            s.statics = {
                                ...s.statics,
                                ...p.statics
                            };
                            s.methods = {
                                ...s.methods,
                                ...p.methods
                            }
                            if (p.plugins) {
                                for (let i = 0; i < p.plugins.length; i++) {
                                    s.plugin(...Array.isArray(p.plugins[i]) ? p.plugins[i] : [p.plugins[i]])
                                }
                            }

                            t[c.name] = mongoose.model(c.name, s);
                            return t;
                        }, {});
                        globalVariable.models = models;
                        mongoose.connect(url, opts)
                            .then(connection => {
                                globalVariable.db = connection;
                                return resolve(connection);
                            })
                            .catch(err => {
                                return reject(err);
                            })
                    } else {
                        throw new Error('`db.options.url` is required');
                    }
                } catch (err) {
                    return reject(err.message || "Some unknown error occured")
                }
                break;

            default:
                reject(`DB type ${type} is not supported`);
        }
    })
}