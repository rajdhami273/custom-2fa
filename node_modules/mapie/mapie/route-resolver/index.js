module.exports = options => (...args) => {
    const router = require('express').Router();
    
    for(let i = 0; i < args.length; i++) {
        const item = args[i];
        const onResult =  item.onResult? item.onResult : options && options.onResult? options.onResult : async (ctx, result) => {
            try {
                ctx.res.body = await result;
            }catch(err) {
                const {status, ...errorBody} = err;
                ctx.res.status(status || 500);
                ctx.res.body = errorBody;
            }
            res.end();
        };
        if(!(item.next || item.resolve)) {
            throw new Error('Either `next` or `resolve` must be defined');
        } 
        if(!item.action) {
            item.action = 'use';
        }
        if(item.action.match(/^(use|get|post|put|delete|option)$/i)) {
            router[item.action.toLowerCase()](
                item.path || '/', 
                ...((item.before || []).map(e=>{
                    return (req, res, next) => {
                        return e({
                            req, res, next, reject: err => onResult({req, res, next}, Promise.reject(err)) 
                        })
                    }
                }) ),
                (req, res, next) => {
                    if(item.next) {
                        item.next(req, res, next);
                    }else{
                        
                        // const onResult =  item.onResult? item.onResult : gOnResult;
                        onResult( {req, res, next}, 
                            Array.isArray(item.resolve)
                            ? item.resolve.reduce((t, c)=>{
                                return c(req, t);
                            }, null)
                            : item.resolve(req));
                        
                    }
                 },
                 ...(item.after || []),
                 (req, res) => {
                    res.send(res.body);
                }

            )
        }else{
            throw new Error('Invalid action type');
        }
    }

    return router;
}