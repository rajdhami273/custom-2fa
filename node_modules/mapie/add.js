

const ejs = require('ejs');
const fs = require('fs');

const createFile = (dir, file, content) => {
    const base = process.env.rootDir+'/app/';
    return new Promise((resolve, reject) => {
        if(fs.existsSync(base+dir)) {
            return resolve();
        }else{
            try {
                const d = fs.mkdirSync(base + dir, {recursive: true})
                return resolve();
            }catch(err) {
                reject(err);
            }
        }
    })
    .then(()=>{
        if(fs.existsSync(base + dir  + file)) {
            return Promise.resolve(`${dir + file} already exists`);
        }else{
            return new Promise((resolve,reject) => {
                fs.writeFile(base + dir + file, content, err => {
                    if(err) {
                        return reject(err);
                    }
                    return resolve(dir + file + ' added');
                })
            })
           
        }
    })
    
}

const contents = {
    model: `
    module.exports = connection => {
        return {
            schema: {},
            options: {},
            plugins: [],
            methods: {},
            statics: {}
        }
    }`,
    service: `
    module.exports = {}`,
    middleware: `
    module.exports = ({req, res, next, reject}) => {
        // Something to add here

        ctx.next();
    }`,
    routes: `
    module.exports = <%= entityTarget %> => {
        return {
            routes: []
        }
    }`,
    controller: `module.exports = {}`,
    type: 
`class <%= entityTarget %> {} 
module.exports = <%= entityTarget %>
    
`
}

const allowedEntities = ['model', 'routes', 'middleware', 'service', 'type'];
const add = ([entity, entityTarget]) => {
    if(entity && entityTarget) {
        
        if(allowedEntities.indexOf(entity) >= 0) {
            
            
            // console.log(content);
            const content = ejs.render(contents[entity], {entityTarget} , {});
            switch(entity) {
                
                case 'model':
                    createFile('models/', entityTarget+'.model.js', content).then(result=>{
                        console.log(result);
                    })
                    .catch(err=>{
                        console.log('Some error', err);
                    })
                break;
                case 'service':
                    createFile('services/', entityTarget+'.service.js', content).then(result=>{
                        console.log(result);
                    })
                    .catch(err=>{
                        console.log('Some error', err);
                    })
                break;
                
                case 'middleware':
                    createFile('middlewares/', entityTarget+'.middleware.js', content)
                    .then(result=>{
                        console.log(result);
                    })
                    .catch(err=>{
                        console.log('Some error', err);
                    })
                break;
                case 'type':
                    createFile('types/', entityTarget+'.type.js', content)  
                    .then(result=>{
                        console.log(result);
                    })
                    .catch(err=>{
                        console.log('Some error', err);
                    })
                break;
                case 'routes':
                    const routeName = entityTarget.split('/').slice(-1);
                    const c1 = ejs.render(contents.controller, {entityTarget: routeName} , {});
                    createFile(`${entityTarget}/`, `${routeName}.controller.js`, c1).then(result=>{
                        console.log(result);
                        const c2 = ejs.render(contents.routes, {entityTarget: routeName} , {});
                        return createFile(`${entityTarget}/`, `${routeName}.routes.js`, c2)
                    })
                    .then(result=>{
                        console.log(result);
                    })
                    .catch(err=>{
                        console.log('Some error', err);
                    })
                break;
            }

            
        }else{
            console.log(`Entities ${allowedEntities.join(', ')} are only allowed`);
        }
    }else{
        console.log('`entity target` is required')
    }
}   

module.exports = add;